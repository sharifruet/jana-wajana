{"ast":null,"code":"var _jsxFileName = \"/Users/sharifuddin/workspace/jana-wajana/react-web/src/components/CreateQuiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport QRCode from 'qrcode.react'; // Example library for generating QR codes\nimport questionsData from '../js/questions.json'; // Import your question list JSON file\nimport axios from 'axios'; // Import Axios\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateQuiz() {\n  _s();\n  // Generate a random 6-digit quiz code\n  const generateQuizCode = () => {\n    const min = 100000; // Minimum 6-digit number\n    const max = 999999; // Maximum 6-digit number\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n  const [quizCode, setQuizCode] = useState(generateQuizCode());\n  const [quizTitle, setQuizTitle] = useState(''); // State for quiz title\n  const quizUrl = `/quiz/${quizCode}`; // URL for others to join the quiz\n\n  // Get a random subset of 10 questions from the question list\n  const getRandomQuestions = () => {\n    const shuffledQuestions = [...questionsData].sort(() => 0.5 - Math.random());\n    return shuffledQuestions.slice(0, 10);\n  };\n  const [questions, setQuestions] = useState(getRandomQuestions());\n\n  // Function to handle submitting the quiz data to the backend using Axios\n  const handleSubmit = async () => {\n    try {\n      const response = await axios.post('http://your-node-api-url/quizzes', {\n        title: quizTitle,\n        // Use the user-provided quiz title\n        quizCode: quizCode,\n        // Use the generated quiz code\n        questions: questions // Use the array of questions\n        // Include other quiz data as needed\n      });\n\n      if (response.status === 201) {\n        // Quiz created successfully, you can handle success here (e.g., show a success message)\n        console.log('Quiz created successfully');\n      } else {\n        // Quiz creation failed, handle error (e.g., show an error message)\n        console.error('Error creating quiz');\n      }\n    } catch (error) {\n      // Handle any network or unexpected errors\n      console.error('An error occurred:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create a New Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Quiz Title\",\n      value: quizTitle,\n      onChange: e => setQuizTitle(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Quiz Code: \", quizCode]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QRCode, {\n      value: quizUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: questions.map((question, questionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Question \", questionIndex + 1, \": \", question.questionText]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: question.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: option\n          }, optionIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Correct Answer: \", question.options[question.correctAnswer]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, questionIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleSubmit,\n      children: \"Create Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateQuiz, \"ih4sqqQ2n+EWOXHLBtVUyjHpBRs=\");\n_c = CreateQuiz;\nexport default CreateQuiz;\nvar _c;\n$RefreshReg$(_c, \"CreateQuiz\");","map":{"version":3,"names":["React","useState","QRCode","questionsData","axios","jsxDEV","_jsxDEV","CreateQuiz","_s","generateQuizCode","min","max","Math","floor","random","quizCode","setQuizCode","quizTitle","setQuizTitle","quizUrl","getRandomQuestions","shuffledQuestions","sort","slice","questions","setQuestions","handleSubmit","response","post","title","status","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","map","question","questionIndex","questionText","options","option","optionIndex","correctAnswer","onClick","_c","$RefreshReg$"],"sources":["/Users/sharifuddin/workspace/jana-wajana/react-web/src/components/CreateQuiz.js"],"sourcesContent":["import React, { useState } from 'react';\nimport QRCode from 'qrcode.react'; // Example library for generating QR codes\nimport questionsData from '../js/questions.json'; // Import your question list JSON file\nimport axios from 'axios'; // Import Axios\n\nfunction CreateQuiz() {\n  // Generate a random 6-digit quiz code\n  const generateQuizCode = () => {\n    const min = 100000; // Minimum 6-digit number\n    const max = 999999; // Maximum 6-digit number\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  const [quizCode, setQuizCode] = useState(generateQuizCode());\n  const [quizTitle, setQuizTitle] = useState(''); // State for quiz title\n  const quizUrl = `/quiz/${quizCode}`; // URL for others to join the quiz\n\n  // Get a random subset of 10 questions from the question list\n  const getRandomQuestions = () => {\n    const shuffledQuestions = [...questionsData].sort(() => 0.5 - Math.random());\n    return shuffledQuestions.slice(0, 10);\n  };\n\n  const [questions, setQuestions] = useState(getRandomQuestions());\n\n  // Function to handle submitting the quiz data to the backend using Axios\n  const handleSubmit = async () => {\n    try {\n      const response = await axios.post('http://your-node-api-url/quizzes', {\n        title: quizTitle, // Use the user-provided quiz title\n        quizCode: quizCode, // Use the generated quiz code\n        questions: questions, // Use the array of questions\n        // Include other quiz data as needed\n      });\n\n      if (response.status === 201) {\n        // Quiz created successfully, you can handle success here (e.g., show a success message)\n        console.log('Quiz created successfully');\n      } else {\n        // Quiz creation failed, handle error (e.g., show an error message)\n        console.error('Error creating quiz');\n      }\n    } catch (error) {\n      // Handle any network or unexpected errors\n      console.error('An error occurred:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Create a New Quiz</h1>\n\n      {/* Input field for quiz title */}\n      <input\n        type=\"text\"\n        placeholder=\"Enter Quiz Title\"\n        value={quizTitle}\n        onChange={(e) => setQuizTitle(e.target.value)}\n      />\n\n      {/* Display the quiz code */}\n      <p>Quiz Code: {quizCode}</p>\n\n      {/* Display the QR code */}\n      <QRCode value={quizUrl} />\n\n      {/* Display the list of random questions */}\n      <div>\n        {questions.map((question, questionIndex) => (\n          <div key={questionIndex}>\n            {/* Display the question text */}\n            <p>Question {questionIndex + 1}: {question.questionText}</p>\n            \n            {/* Display options */}\n            <ul>\n              {question.options.map((option, optionIndex) => (\n                <li key={optionIndex}>{option}</li>\n              ))}\n            </ul>\n            \n            {/* Display the correct answer */}\n            <p>Correct Answer: {question.options[question.correctAnswer]}</p>\n          </div>\n        ))}\n      </div>\n\n      {/* Additional form for creating quiz questions (if needed) */}\n      {/* Add form elements for creating questions, options, and correct answers */}\n      \n      <button type=\"button\" onClick={handleSubmit}>\n        Create Quiz\n      </button>\n    </div>\n  );\n}\n\nexport default CreateQuiz;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}