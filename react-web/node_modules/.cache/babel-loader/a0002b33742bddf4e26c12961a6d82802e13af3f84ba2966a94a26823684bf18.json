{"ast":null,"code":"var _jsxFileName = \"/Users/sharifuddin/workspace/jana-wajana/src/components/CreateQuiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport QRCode from 'qrcode.react'; // Example library for generating QR codes\nimport questionsData from '../js/questions.json'; // Import your question list JSON file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateQuiz() {\n  _s();\n  // Generate a random 6-digit quiz code\n  const generateQuizCode = () => {\n    const min = 100000; // Minimum 6-digit number\n    const max = 999999; // Maximum 6-digit number\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n  const [quizCode, setQuizCode] = useState(generateQuizCode());\n  const quizUrl = `/quiz/${quizCode}`; // URL for others to join the quiz\n\n  // Get a random subset of 10 questions from the question list\n  const getRandomQuestions = () => {\n    const shuffledQuestions = [...questionsData].sort(() => 0.5 - Math.random());\n    return shuffledQuestions.slice(0, 10);\n  };\n  const [questions, setQuestions] = useState(getRandomQuestions());\n\n  // Function to add a new question to the quiz (if needed)\n  const addQuestion = () => {\n    // Implement logic to add a new question\n  };\n\n  // Function to handle submitting the quiz data to the backend\n  const handleSubmit = () => {\n    // Implement logic to send quiz data to the backend for creation\n    // Include quizCode, questions, options, and correct answers\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create a New Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Quiz Code: \", quizCode]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QRCode, {\n      value: quizUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: questions.map((question, questionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Question \", questionIndex + 1, \": \", question.questionText]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: question.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: option\n          }, optionIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Correct Answer: \", question.options[question.correctAnswer]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)]\n      }, questionIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: addQuestion,\n      children: \"Add Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleSubmit,\n      children: \"Create Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateQuiz, \"7+lK5gbM28pv5ODNDJjX42VYnS8=\");\n_c = CreateQuiz;\nexport default CreateQuiz;\nvar _c;\n$RefreshReg$(_c, \"CreateQuiz\");","map":{"version":3,"names":["React","useState","QRCode","questionsData","jsxDEV","_jsxDEV","CreateQuiz","_s","generateQuizCode","min","max","Math","floor","random","quizCode","setQuizCode","quizUrl","getRandomQuestions","shuffledQuestions","sort","slice","questions","setQuestions","addQuestion","handleSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","value","map","question","questionIndex","questionText","options","option","optionIndex","correctAnswer","type","onClick","_c","$RefreshReg$"],"sources":["/Users/sharifuddin/workspace/jana-wajana/src/components/CreateQuiz.js"],"sourcesContent":["import React, { useState } from 'react';\nimport QRCode from 'qrcode.react'; // Example library for generating QR codes\nimport questionsData from '../js/questions.json'; // Import your question list JSON file\n\nfunction CreateQuiz() {\n  // Generate a random 6-digit quiz code\n  const generateQuizCode = () => {\n    const min = 100000; // Minimum 6-digit number\n    const max = 999999; // Maximum 6-digit number\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  const [quizCode, setQuizCode] = useState(generateQuizCode());\n  const quizUrl = `/quiz/${quizCode}`; // URL for others to join the quiz\n\n  // Get a random subset of 10 questions from the question list\n  const getRandomQuestions = () => {\n    const shuffledQuestions = [...questionsData].sort(() => 0.5 - Math.random());\n    return shuffledQuestions.slice(0, 10);\n  };\n\n  const [questions, setQuestions] = useState(getRandomQuestions());\n\n  // Function to add a new question to the quiz (if needed)\n  const addQuestion = () => {\n    // Implement logic to add a new question\n  };\n\n  // Function to handle submitting the quiz data to the backend\n  const handleSubmit = () => {\n    // Implement logic to send quiz data to the backend for creation\n    // Include quizCode, questions, options, and correct answers\n  };\n\n  return (\n    <div>\n      <h1>Create a New Quiz</h1>\n\n      {/* Display the quiz code */}\n      <p>Quiz Code: {quizCode}</p>\n\n      {/* Display the QR code */}\n      <QRCode value={quizUrl} />\n\n      {/* Display the list of random questions */}\n      <div>\n        {questions.map((question, questionIndex) => (\n          <div key={questionIndex}>\n            {/* Display the question text */}\n            <p>Question {questionIndex + 1}: {question.questionText}</p>\n            \n            {/* Display options */}\n            <ul>\n              {question.options.map((option, optionIndex) => (\n                <li key={optionIndex}>{option}</li>\n              ))}\n            </ul>\n            \n            {/* Display the correct answer */}\n            <p>Correct Answer: {question.options[question.correctAnswer]}</p>\n          </div>\n        ))}\n      </div>\n\n      {/* Additional form for creating quiz questions (if needed) */}\n      {/* Add form elements for creating questions, options, and correct answers */}\n      \n      <button type=\"button\" onClick={addQuestion}>\n        Add Question\n      </button>\n      <button type=\"button\" onClick={handleSubmit}>\n        Create Quiz\n      </button>\n    </div>\n  );\n}\n\nexport default CreateQuiz;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}