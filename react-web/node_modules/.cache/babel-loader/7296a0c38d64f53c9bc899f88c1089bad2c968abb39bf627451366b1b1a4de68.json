{"ast":null,"code":"var _jsxFileName = \"/Users/sharifuddin/workspace/jana-wajana/src/components/CreateQuiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport QRCode from 'qrcode.react'; // Example library for generating QR codes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateQuiz() {\n  _s();\n  // Generate a random 6-digit quiz code\n  const generateQuizCode = () => {\n    const min = 100000; // Minimum 6-digit number\n    const max = 999999; // Maximum 6-digit number\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n  const [quizCode, setQuizCode] = useState(generateQuizCode());\n  const quizUrl = `/quiz/${quizCode}`; // URL for others to join the quiz\n\n  // State for managing quiz question input\n  const [questions, setQuestions] = useState([{\n    questionText: '',\n    options: ['', '', '', ''],\n    correctAnswer: 0\n  }]);\n\n  // Function to add a new question to the quiz\n  const addQuestion = () => {\n    setQuestions(prevQuestions => [...prevQuestions, {\n      questionText: '',\n      options: ['', '', '', ''],\n      correctAnswer: 0\n    }]);\n  };\n\n  // Function to handle changes in question text input\n  const handleQuestionChange = (questionIndex, text) => {\n    setQuestions(prevQuestions => {\n      const updatedQuestions = [...prevQuestions];\n      updatedQuestions[questionIndex].questionText = text;\n      return updatedQuestions;\n    });\n  };\n\n  // Function to handle changes in option text input\n  const handleOptionChange = (questionIndex, optionIndex, text) => {\n    setQuestions(prevQuestions => {\n      const updatedQuestions = [...prevQuestions];\n      updatedQuestions[questionIndex].options[optionIndex] = text;\n      return updatedQuestions;\n    });\n  };\n\n  // Function to handle selecting the correct answer\n  const handleCorrectAnswerChange = (questionIndex, optionIndex) => {\n    setQuestions(prevQuestions => {\n      const updatedQuestions = [...prevQuestions];\n      updatedQuestions[questionIndex].correctAnswer = optionIndex;\n      return updatedQuestions;\n    });\n  };\n\n  // Function to handle submitting the quiz data to the backend\n  const handleSubmit = () => {\n    // Implement logic to send quiz data to the backend for creation\n    // Include quizCode, questions, options, and correct answers\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create a New Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Quiz Code: \", quizCode]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QRCode, {\n      value: quizUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [questions.map((question, questionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: `Enter question ${questionIndex + 1}`,\n          value: question.questionText,\n          onChange: e => handleQuestionChange(questionIndex, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), question.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: `Option ${optionIndex + 1}`,\n            value: option,\n            onChange: e => handleOptionChange(questionIndex, optionIndex, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `correctAnswer-${questionIndex}`,\n            checked: question.correctAnswer === optionIndex,\n            onChange: () => handleCorrectAnswerChange(questionIndex, optionIndex)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this)]\n        }, optionIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this))]\n      }, questionIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addQuestion,\n        children: \"Add Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleSubmit,\n        children: \"Create Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateQuiz, \"X9nfyNs0xJW4Tf9DNpirwvtKo10=\");\n_c = CreateQuiz;\nexport default CreateQuiz;\nvar _c;\n$RefreshReg$(_c, \"CreateQuiz\");","map":{"version":3,"names":["React","useState","QRCode","jsxDEV","_jsxDEV","CreateQuiz","_s","generateQuizCode","min","max","Math","floor","random","quizCode","setQuizCode","quizUrl","questions","setQuestions","questionText","options","correctAnswer","addQuestion","prevQuestions","handleQuestionChange","questionIndex","text","updatedQuestions","handleOptionChange","optionIndex","handleCorrectAnswerChange","handleSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","value","map","question","type","placeholder","onChange","e","target","option","name","checked","onClick","_c","$RefreshReg$"],"sources":["/Users/sharifuddin/workspace/jana-wajana/src/components/CreateQuiz.js"],"sourcesContent":["import React, { useState } from 'react';\nimport QRCode from 'qrcode.react'; // Example library for generating QR codes\n\nfunction CreateQuiz() {\n  // Generate a random 6-digit quiz code\n  const generateQuizCode = () => {\n    const min = 100000; // Minimum 6-digit number\n    const max = 999999; // Maximum 6-digit number\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  const [quizCode, setQuizCode] = useState(generateQuizCode());\n  const quizUrl = `/quiz/${quizCode}`; // URL for others to join the quiz\n\n  // State for managing quiz question input\n  const [questions, setQuestions] = useState([\n    { questionText: '', options: ['', '', '', ''], correctAnswer: 0 },\n  ]);\n\n  // Function to add a new question to the quiz\n  const addQuestion = () => {\n    setQuestions((prevQuestions) => [\n      ...prevQuestions,\n      { questionText: '', options: ['', '', '', ''], correctAnswer: 0 },\n    ]);\n  };\n\n  // Function to handle changes in question text input\n  const handleQuestionChange = (questionIndex, text) => {\n    setQuestions((prevQuestions) => {\n      const updatedQuestions = [...prevQuestions];\n      updatedQuestions[questionIndex].questionText = text;\n      return updatedQuestions;\n    });\n  };\n\n  // Function to handle changes in option text input\n  const handleOptionChange = (questionIndex, optionIndex, text) => {\n    setQuestions((prevQuestions) => {\n      const updatedQuestions = [...prevQuestions];\n      updatedQuestions[questionIndex].options[optionIndex] = text;\n      return updatedQuestions;\n    });\n  };\n\n  // Function to handle selecting the correct answer\n  const handleCorrectAnswerChange = (questionIndex, optionIndex) => {\n    setQuestions((prevQuestions) => {\n      const updatedQuestions = [...prevQuestions];\n      updatedQuestions[questionIndex].correctAnswer = optionIndex;\n      return updatedQuestions;\n    });\n  };\n\n  // Function to handle submitting the quiz data to the backend\n  const handleSubmit = () => {\n    // Implement logic to send quiz data to the backend for creation\n    // Include quizCode, questions, options, and correct answers\n  };\n\n  return (\n    <div>\n      <h1>Create a New Quiz</h1>\n\n      {/* Display the quiz code */}\n      <p>Quiz Code: {quizCode}</p>\n\n      {/* Display the QR code */}\n      <QRCode value={quizUrl} />\n\n      {/* Additional form for creating quiz questions */}\n      <form>\n        {questions.map((question, questionIndex) => (\n          <div key={questionIndex}>\n            {/* Input field for entering the question text */}\n            <input\n              type=\"text\"\n              placeholder={`Enter question ${questionIndex + 1}`}\n              value={question.questionText}\n              onChange={(e) =>\n                handleQuestionChange(questionIndex, e.target.value)\n              }\n            />\n\n            {/* Input fields for entering options */}\n            {question.options.map((option, optionIndex) => (\n              <div key={optionIndex}>\n                <input\n                  type=\"text\"\n                  placeholder={`Option ${optionIndex + 1}`}\n                  value={option}\n                  onChange={(e) =>\n                    handleOptionChange(\n                      questionIndex,\n                      optionIndex,\n                      e.target.value\n                    )\n                  }\n                />\n\n                {/* Radio button to select the correct answer */}\n                <input\n                  type=\"radio\"\n                  name={`correctAnswer-${questionIndex}`}\n                  checked={question.correctAnswer === optionIndex}\n                  onChange={() =>\n                    handleCorrectAnswerChange(questionIndex, optionIndex)\n                  }\n                />\n              </div>\n            ))}\n          </div>\n        ))}\n        <button type=\"button\" onClick={addQuestion}>\n          Add Question\n        </button>\n        <button type=\"button\" onClick={handleSubmit}>\n          Create Quiz\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateQuiz;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}